 Given a singly linked list of integers, sort it using 'Merge Sort.'
Note :
No need to print the list, it has already been taken care. Only return the new head to the list.
Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

The first and the only line of each test case or query contains the elements of the singly linked list separated by a single space.
Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element
Output format :
For each test case/query, print the elements of the sorted singly linked list.

Output for every test case will be printed in a seperate line.
Constraints :
1 <= t <= 10^2
0 <= M <= 10^5
Where M is the size of the singly linked list.

Time Limit: 1sec
Sample Input 1 :
1
10 9 8 7 6 5 4 3 -1
Sample Output 1 :
 3 4 5 6 7 8 9 10 
 Sample Output 2 :
2
-1
10 -5 9 90 5 67 1 89 -1
Sample Output 2 :
-5 1 5 9 10 67 89 90 

program:
from sys import stdin, setrecursionlimit
setrecursionlimit(10 ** 8)

#Following is the Node class already written for the Linked List
class Node :
    def __init__(self, data) :
        self.data = data
        self.next = None

def count(head):
    if head==None:
        return 0
    return 1+count(head.next)
def midPoint(head) :
    #Your code goes here
    if head==None or head.next==None:
        return head
   
    slow = head 
    fast = head.next
    while fast is not None and fast.next is not None :
        slow = slow.next
       # if fast.next.next is not None :
        fast = fast.next.next
        
    return slow
def mergeSort(head) :
	#Your code goes here
    if head==None :
        return head
    if head.next == None :
        return head 
   # len=count(head)-1
    #mid=len//2
    temp=midPoint(head)
    head1=head 
    head2=head
   # while i<mid and temp.next != None :
    #    temp=temp.next
     #   i+=1
    head2= temp.next
    temp.next=None
    ans1 = mergeSort(head1)
    ans2 = mergeSort(head2)
    ans=head
    tail = ans
    if ans1.data<ans2.data:
        ans= ans1
        tail=ans
        ans1=ans1.next
    else : 
        ans = ans2
        tail= ans
        ans2=ans2.next
        
    while ans1 != None and ans2 != None :
        if ans2.data < ans1.data :
            tail.next=ans2 
            tail=ans2
            ans2=ans2.next
        else :
            tail.next= ans1
            tail=ans1
            ans1=ans1.next
            
    if ans1 != None :
        tail.next=ans1
    if ans2 !=None :
        tail.next= ans2
        
    return ans
    
    
    
    



























#Taking Input Using Fast I/O
def takeInput() :
    head = None
    tail = None

    datas = list(map(int, stdin.readline().rstrip().split(" ")))

    i = 0
    while (i < len(datas)) and (datas[i] != -1) :
        data = datas[i]
        newNode = Node(data)

        if head is None :
            head = newNode
            tail = newNode

        else :
            tail.next = newNode
            tail = newNode

        i += 1

    return head


def printLinkedList(head) :

    while head is not None :
        print(head.data, end = " ")
        head = head.next

    print()


#main
t = int(stdin.readline().rstrip())

while t > 0 :
    
    head = takeInput()

    newHead = mergeSort(head)
    printLinkedList(newHead)

    t -= 1
