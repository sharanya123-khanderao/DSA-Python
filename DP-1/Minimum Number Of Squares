A number can always be represented as a sum of squares of other numbers. Note that 1 is a square and we can always break a number as [(1 * 1) + (1 * 1) + (1 * 1) + â€¦]. Given a number n, find the minimum number of squares that sum to n.
Input format:
 The first and only line of input contains an integer N (1 <= N <= 10000)
Constraints:
 Time Limit: 1 seconds
Output format:
The first and only line of output contains the minimum number if squares that sum to n.
Sample Test Cases:
Sample Input 1:
100
Sample Output 1:
1
Explanation:
We can write 100 as 10^2 also, 100 can be written as (5^2) + (5^2) + (5^2) + (5^2), but this representation requires 4 squares. So, in this case, the expected answer would be 1, that is, 10^2.

program:
import sys
from math import sqrt
def minStepsTo1(n):
    
    dp = [10005 for x in range(0,n+1)]
    dp[0]=0
    for i in range (1,n+1):
        for j in range(1,int(sqrt(i))+1):
            dp[i]=min(dp[i],dp[i- (j*j)]+1);

    return dp[n]
n = int(input())
ans = minStepsTo1(n)
print(ans)
