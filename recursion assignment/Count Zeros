Given an integer N, count and return the number of zeros that are present in the given integer using recursion.
Input Format :
Integer N
Output Format :
Number of zeros in N
Constraints :
0 <= N <= 10^9
Sample Input 1 :
0
Sample Output 1 :
1
Sample Input 2 :
00010204
Sample Output 2 :
2
Explanation for Sample Output 2 :
Even though "00010204" has 5 zeros, the output would still be 2 because when you convert it to an integer, it becomes 10204.
Sample Input 3 :
708000
Sample Output 3 :
4

program:
## Read input as specified in the question.
## Print output as specified in the question.

#changing the default rec limit 
from sys import setrecursionlimit
setrecursionlimit(11000)
#function to count no. of zeros
def count(n):
    #if n=0 return 1 and if n is b/w 1-9 return 0
    if n<10:
        if n==0:
            return 1
        return 0
    #recursive call on rest of the number (n//10)
    ans=count(n//10)
    # if the number has 0 in it add 1 to ans and return
    if n%10==0:
        ans+=1
    return ans
    
n=int(input())
print(count(n))
